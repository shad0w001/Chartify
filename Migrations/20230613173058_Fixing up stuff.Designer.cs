// <auto-generated />
using System;
using Chartify.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chartify.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230613173058_Fixing up stuff")]
    partial class Fixingupstuff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChartSetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DifficultyRating")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChartSetId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChartSets");
                });

            modelBuilder.Entity("Chartify.Models.ChartsOfSets", b =>
                {
                    b.Property<string>("ChartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChartSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ChartId");

                    b.HasIndex("ChartSetId");

                    b.ToTable("ChartsOfSets");
                });

            modelBuilder.Entity("Chartify.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8b41ab70-a495-41c3-a7f3-1437c3326150",
                            ConcurrencyStamp = "59ad3e8a-8e9f-4a08-9f09-d4fd88ef3b35",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d92019bb-20cf-4bce-9845-35528c5e464d",
                            ConcurrencyStamp = "6c0ee63b-8d87-4dc1-b0f6-c1868cead2ae",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "979f6b9f-f0b0-49be-8683-ba7831df8e26",
                            ConcurrencyStamp = "2ba64e3b-4096-4229-83df-d92069580c6c",
                            Name = "Featured Artist",
                            NormalizedName = "FEATURED ARTIST"
                        },
                        new
                        {
                            Id = "3cc9bbc4-50b4-4d6f-87aa-ce59b4db9901",
                            ConcurrencyStamp = "35892a6d-6534-4152-9b1b-efe06975fc64",
                            Name = "Mapper",
                            NormalizedName = "MAPPER"
                        });
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ee98ffa-0281-4866-a596-02579bb828dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c46135cd-eeb3-4b47-a74b-8d77ffb5f0bf",
                            CreationDate = new DateTime(2023, 6, 13, 20, 30, 57, 947, DateTimeKind.Local).AddTicks(4375),
                            Email = "a@admin.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 13, 20, 30, 57, 947, DateTimeKind.Local).AddTicks(4422),
                            LockoutEnabled = false,
                            NormalizedEmail = "A@ADMIN.COM",
                            NormalizedUserName = "SHAD0W",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCYnbDBSF7mtBAOC3S3LQAA/Yqnym419S3byXsO0XLNwrN+BlQoUBaeVeOfGmvQZw==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "Users/ProfileBanners/default.png",
                            ProfilePicturePath = "Users/ProfilePictures/default.png",
                            SecurityStamp = "afa509a4-24ca-4ece-99f0-582968ff21e9",
                            TwoFactorEnabled = false,
                            UserName = "shad0w"
                        },
                        new
                        {
                            Id = "7b52428e-de63-4ecc-b961-4f69dfc84774",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "312779f3-189a-4891-8e2a-c2d26d6a6d42",
                            CreationDate = new DateTime(2023, 6, 13, 20, 30, 57, 951, DateTimeKind.Local).AddTicks(1501),
                            Email = "u@user.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 13, 20, 30, 57, 951, DateTimeKind.Local).AddTicks(1565),
                            LockoutEnabled = false,
                            NormalizedEmail = "U@USER.COM",
                            NormalizedUserName = "ONEGAI",
                            PasswordHash = "AQAAAAEAACcQAAAAEBT6idZPV8M2oTD2wi1b0RXk1FGhUQZPkwoYGo7mtSOSaenskQlVbZoWcdVbY28GHg==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "Users/ProfileBanners/default.png",
                            ProfilePicturePath = "Users/ProfilePictures/default.png",
                            SecurityStamp = "1d232201-ad16-41bb-9886-848069789fa3",
                            TwoFactorEnabled = false,
                            UserName = "onegai"
                        },
                        new
                        {
                            Id = "29b7ff78-c5f4-4015-a0b7-ec8cf5f533c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76612f4a-680d-46c1-93fa-e34b45f22d59",
                            CreationDate = new DateTime(2023, 6, 13, 20, 30, 57, 954, DateTimeKind.Local).AddTicks(1550),
                            Email = "fa@arist.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 13, 20, 30, 57, 954, DateTimeKind.Local).AddTicks(1602),
                            LockoutEnabled = false,
                            NormalizedEmail = "FA@ARIST.COM",
                            NormalizedUserName = "NAMIRIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDJ23340mLJQtneib0mfp4lRoQcH20hNkJRmu40NZLArxhevEt70pwtCb3Fe5sv+mg==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "Users/ProfileBanners/default.png",
                            ProfilePicturePath = "Users/ProfilePictures/default.png",
                            SecurityStamp = "ded40d02-502d-414f-9d59-cc163b72f5e5",
                            TwoFactorEnabled = false,
                            UserName = "namirin"
                        },
                        new
                        {
                            Id = "08c49b9d-3dcb-4a2d-9d4b-686d2f3f2e14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "398d1cbb-374f-4af2-b767-ce5bc6708da1",
                            CreationDate = new DateTime(2023, 6, 13, 20, 30, 57, 957, DateTimeKind.Local).AddTicks(876),
                            Email = "m@mapper.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 13, 20, 30, 57, 957, DateTimeKind.Local).AddTicks(930),
                            LockoutEnabled = false,
                            NormalizedEmail = "M@MAPPER.COM",
                            NormalizedUserName = "SOTARKS",
                            PasswordHash = "AQAAAAEAACcQAAAAEJT3KvUMDJ4C2REkaHUJj6YPEkbVsWsZAIkhweyU9oowGhuIHgjWJxYOG/Ct9MQ5XQ==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "Users/ProfileBanners/default.png",
                            ProfilePicturePath = "Users/ProfilePictures/default.png",
                            SecurityStamp = "b122e5d2-311e-4e61-9fe1-7c9f8931071b",
                            TwoFactorEnabled = false,
                            UserName = "Sotarks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4ee98ffa-0281-4866-a596-02579bb828dd",
                            RoleId = "8b41ab70-a495-41c3-a7f3-1437c3326150"
                        },
                        new
                        {
                            UserId = "7b52428e-de63-4ecc-b961-4f69dfc84774",
                            RoleId = "d92019bb-20cf-4bce-9845-35528c5e464d"
                        },
                        new
                        {
                            UserId = "29b7ff78-c5f4-4015-a0b7-ec8cf5f533c8",
                            RoleId = "979f6b9f-f0b0-49be-8683-ba7831df8e26"
                        },
                        new
                        {
                            UserId = "08c49b9d-3dcb-4a2d-9d4b-686d2f3f2e14",
                            RoleId = "3cc9bbc4-50b4-4d6f-87aa-ce59b4db9901"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("SubscribedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubscribersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscribedToId", "SubscribersId");

                    b.HasIndex("SubscribersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.HasOne("Chartify.Models.ChartSet", "ChartSet")
                        .WithMany("Charts")
                        .HasForeignKey("ChartSetId");

                    b.Navigation("ChartSet");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.HasOne("Chartify.Models.User", "Creator")
                        .WithMany("ChartSets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Chartify.Models.ChartsOfSets", b =>
                {
                    b.HasOne("Chartify.Models.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.ChartSet", "ChartSet")
                        .WithMany()
                        .HasForeignKey("ChartSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");

                    b.Navigation("ChartSet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SubscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Navigation("ChartSets");
                });
#pragma warning restore 612, 618
        }
    }
}
