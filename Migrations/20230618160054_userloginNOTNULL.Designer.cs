// <auto-generated />
using System;
using Chartify.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chartify.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230618160054_userloginNOTNULL")]
    partial class userloginNOTNULL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChartSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DifficultyRating")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChartSetId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChartSets");
                });

            modelBuilder.Entity("Chartify.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "385a7482-b3d9-4e9c-a60e-16ac224c3e5d",
                            ConcurrencyStamp = "2be584b5-60a9-4aa9-87c2-91509d40800e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4d008769-34be-474c-89a8-44be59a37497",
                            ConcurrencyStamp = "75e287c9-7d1c-495b-a025-0528a47b7877",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "cd1096bd-9458-4d15-8e32-66420d9d7d36",
                            ConcurrencyStamp = "61b9377f-801b-44a5-9b01-59132362f3c9",
                            Name = "Featured Artist",
                            NormalizedName = "FEATURED ARTIST"
                        },
                        new
                        {
                            Id = "048a4e23-cd70-4fd3-ab64-fd6a782fc41d",
                            ConcurrencyStamp = "c6aaa192-d78a-4a71-a7da-342a694d4e82",
                            Name = "Mapper",
                            NormalizedName = "MAPPER"
                        });
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "937b2434-e316-45c4-ad8f-212d74a5f179",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c9322be-8935-45b2-a562-bf59317a995a",
                            CreationDate = new DateTime(2023, 6, 18, 19, 0, 54, 257, DateTimeKind.Local).AddTicks(5198),
                            Email = "a@admin.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 19, 0, 54, 257, DateTimeKind.Local).AddTicks(5245),
                            LockoutEnabled = false,
                            NormalizedEmail = "A@ADMIN.COM",
                            NormalizedUserName = "SHAD0W",
                            PasswordHash = "AQAAAAEAACcQAAAAEDoD8S2gfhlRJfLazg8+JMMuw32zfBJY9tk545yECVINPMc5zWtQvLG6y8eExWWW6A==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "5e7382b1-9bfc-49ac-80d0-4b55a9b51068",
                            TwoFactorEnabled = false,
                            UserName = "shad0w"
                        },
                        new
                        {
                            Id = "bdea10d4-f7a4-4895-aa26-d175e3807ff8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa01bef0-ff1e-43a5-8af9-66793b663c81",
                            CreationDate = new DateTime(2023, 6, 18, 19, 0, 54, 258, DateTimeKind.Local).AddTicks(7163),
                            Email = "u@user.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 19, 0, 54, 258, DateTimeKind.Local).AddTicks(7176),
                            LockoutEnabled = false,
                            NormalizedEmail = "U@USER.COM",
                            NormalizedUserName = "ONEGAI",
                            PasswordHash = "AQAAAAEAACcQAAAAENR4jXhJF1CUrUgx+rjE3T6idLcvevjNqziSZ1rbVmL4xTgfeGvkUZ/aTUQ+qTWenQ==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "06a4322e-4cd5-44d1-a7b8-9de3f7f40064",
                            TwoFactorEnabled = false,
                            UserName = "onegai"
                        },
                        new
                        {
                            Id = "57bf7688-2ebd-47d2-9eca-d1d029115b03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35a3860b-5937-406c-95f6-bc15b1547acf",
                            CreationDate = new DateTime(2023, 6, 18, 19, 0, 54, 259, DateTimeKind.Local).AddTicks(8800),
                            Email = "fa@arist.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 19, 0, 54, 259, DateTimeKind.Local).AddTicks(8806),
                            LockoutEnabled = false,
                            NormalizedEmail = "FA@ARIST.COM",
                            NormalizedUserName = "NAMIRIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOq0BcGjl3LLTs77YybbQIt6yTCDzxKZ4GP4FyxORvGdG4sTk4xBoadRaxXsCx5MjQ==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "f8475907-80ed-461a-9961-a4e6ac83e806",
                            TwoFactorEnabled = false,
                            UserName = "namirin"
                        },
                        new
                        {
                            Id = "99ebd757-b7cf-4ab4-8acc-172c212d7528",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "158079af-d1b1-4bb0-b59b-5a013f1d396e",
                            CreationDate = new DateTime(2023, 6, 18, 19, 0, 54, 260, DateTimeKind.Local).AddTicks(9863),
                            Email = "m@mapper.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 19, 0, 54, 260, DateTimeKind.Local).AddTicks(9866),
                            LockoutEnabled = false,
                            NormalizedEmail = "M@MAPPER.COM",
                            NormalizedUserName = "SOTARKS",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1ydenMSFGl2dPiFiBt43SpvC10qcMi1wiQL83CvjWoQj4dydBD03J5MOUrL4Az5g==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "2d99fd6f-46d0-4047-a8e3-719187996923",
                            TwoFactorEnabled = false,
                            UserName = "Sotarks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "937b2434-e316-45c4-ad8f-212d74a5f179",
                            RoleId = "385a7482-b3d9-4e9c-a60e-16ac224c3e5d"
                        },
                        new
                        {
                            UserId = "bdea10d4-f7a4-4895-aa26-d175e3807ff8",
                            RoleId = "4d008769-34be-474c-89a8-44be59a37497"
                        },
                        new
                        {
                            UserId = "57bf7688-2ebd-47d2-9eca-d1d029115b03",
                            RoleId = "cd1096bd-9458-4d15-8e32-66420d9d7d36"
                        },
                        new
                        {
                            UserId = "99ebd757-b7cf-4ab4-8acc-172c212d7528",
                            RoleId = "048a4e23-cd70-4fd3-ab64-fd6a782fc41d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.HasOne("Chartify.Models.ChartSet", "ChartSet")
                        .WithMany("Charts")
                        .HasForeignKey("ChartSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartSet");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.HasOne("Chartify.Models.User", "Creator")
                        .WithMany("ChartSets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Navigation("ChartSets");
                });
#pragma warning restore 612, 618
        }
    }
}
