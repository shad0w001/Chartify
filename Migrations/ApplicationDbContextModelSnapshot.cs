// <auto-generated />
using System;
using Chartify.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chartify.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChartSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DifficultyRating")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChartSetId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChartSets");
                });

            modelBuilder.Entity("Chartify.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff2019eb-f2f0-4eff-a48a-384d9a7be8ee",
                            ConcurrencyStamp = "91ef000c-d511-4784-9efa-c143f8877009",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b0e64335-3e65-4597-afe2-0273a4d565d8",
                            ConcurrencyStamp = "f303de62-2e1d-4c48-8a98-969bfe3f733b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c2430274-97bb-41e7-a903-34dbb277d5cb",
                            ConcurrencyStamp = "bcff66a1-4875-4a0e-9c82-9883da09137d",
                            Name = "Featured Artist",
                            NormalizedName = "FEATURED ARTIST"
                        },
                        new
                        {
                            Id = "28a567b9-3a28-4dfa-b7c6-6f02dc9ef8aa",
                            ConcurrencyStamp = "9962fdba-3dd4-4a4d-bc41-c0c89a6da813",
                            Name = "Mapper",
                            NormalizedName = "MAPPER"
                        });
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "017c5448-26cd-4727-81b0-50d22b312372",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7638366-cf92-4ef6-946b-abcd7ba9ac1c",
                            CreationDate = new DateTime(2023, 6, 15, 20, 21, 15, 540, DateTimeKind.Local).AddTicks(7055),
                            Email = "a@admin.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 15, 20, 21, 15, 540, DateTimeKind.Local).AddTicks(7095),
                            LockoutEnabled = false,
                            NormalizedEmail = "A@ADMIN.COM",
                            NormalizedUserName = "SHAD0W",
                            PasswordHash = "AQAAAAEAACcQAAAAENS3gmW6cpFv5tUxcuSXkvpKkhEFOv5yNlyxAEJThEW7K56PSoe7PFmX+wNipYAGzg==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "48814cb9-7029-4e9d-9867-e0ee6bb5263c",
                            TwoFactorEnabled = false,
                            UserName = "shad0w"
                        },
                        new
                        {
                            Id = "eab27330-cea8-41ea-8b0b-4dd18792a304",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "709ff970-c1dd-4ef0-973c-c54eb209fa86",
                            CreationDate = new DateTime(2023, 6, 15, 20, 21, 15, 543, DateTimeKind.Local).AddTicks(225),
                            Email = "u@user.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 15, 20, 21, 15, 543, DateTimeKind.Local).AddTicks(230),
                            LockoutEnabled = false,
                            NormalizedEmail = "U@USER.COM",
                            NormalizedUserName = "ONEGAI",
                            PasswordHash = "AQAAAAEAACcQAAAAEH+80JNoj9CygM8k9rPUL8OUUrvoU915WvR4spEIoPxyfSI9PzCoxukOdr/vgzC8+Q==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "6e7e4242-da85-49ea-9b60-ef1d18ff956f",
                            TwoFactorEnabled = false,
                            UserName = "onegai"
                        },
                        new
                        {
                            Id = "ed14f34b-d1bc-4f05-8ff8-90514f3393bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "235d9a17-fc49-48fa-9308-9d6210d3d1bd",
                            CreationDate = new DateTime(2023, 6, 15, 20, 21, 15, 545, DateTimeKind.Local).AddTicks(3724),
                            Email = "fa@arist.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 15, 20, 21, 15, 545, DateTimeKind.Local).AddTicks(3729),
                            LockoutEnabled = false,
                            NormalizedEmail = "FA@ARIST.COM",
                            NormalizedUserName = "NAMIRIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENXnr9JKe4TH3SlEFP+M+nt129HDJcRIxPg1FmwdpUp9gtiwtKq5gPrhD0jPoSiL7w==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "2a491a6e-42b3-4545-92a7-372cda492a69",
                            TwoFactorEnabled = false,
                            UserName = "namirin"
                        },
                        new
                        {
                            Id = "a330f7ca-4fd8-4a49-90a8-e2d8847d944c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c91afd2-f04a-4af4-ac11-19242cd069f1",
                            CreationDate = new DateTime(2023, 6, 15, 20, 21, 15, 547, DateTimeKind.Local).AddTicks(6865),
                            Email = "m@mapper.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 15, 20, 21, 15, 547, DateTimeKind.Local).AddTicks(6870),
                            LockoutEnabled = false,
                            NormalizedEmail = "M@MAPPER.COM",
                            NormalizedUserName = "SOTARKS",
                            PasswordHash = "AQAAAAEAACcQAAAAEIQxuRTXxs/Dm+v0bMLJDwRekA0O6L3ruxTIkv/8qYZLbvjsY61xzL1rvwPxyy9efg==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "4d0acc6e-e98c-4c4e-ad82-57e9d72f7063",
                            TwoFactorEnabled = false,
                            UserName = "Sotarks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "017c5448-26cd-4727-81b0-50d22b312372",
                            RoleId = "ff2019eb-f2f0-4eff-a48a-384d9a7be8ee"
                        },
                        new
                        {
                            UserId = "eab27330-cea8-41ea-8b0b-4dd18792a304",
                            RoleId = "b0e64335-3e65-4597-afe2-0273a4d565d8"
                        },
                        new
                        {
                            UserId = "ed14f34b-d1bc-4f05-8ff8-90514f3393bc",
                            RoleId = "c2430274-97bb-41e7-a903-34dbb277d5cb"
                        },
                        new
                        {
                            UserId = "a330f7ca-4fd8-4a49-90a8-e2d8847d944c",
                            RoleId = "28a567b9-3a28-4dfa-b7c6-6f02dc9ef8aa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.HasOne("Chartify.Models.ChartSet", "ChartSet")
                        .WithMany("Charts")
                        .HasForeignKey("ChartSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartSet");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.HasOne("Chartify.Models.User", "Creator")
                        .WithMany("ChartSets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Navigation("ChartSets");
                });
#pragma warning restore 612, 618
        }
    }
}
