// <auto-generated />
using System;
using Chartify.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chartify.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230618170608_adding chartset status")]
    partial class addingchartsetstatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChartSetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DifficultyRating")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChartSetId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChartSets");
                });

            modelBuilder.Entity("Chartify.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ace8095e-6a00-4cf1-89bf-158d31131711",
                            ConcurrencyStamp = "8a4da5e6-7aaa-4dba-b96c-09da435b1758",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f5013bd9-a06a-4ef7-9963-259fe85907cd",
                            ConcurrencyStamp = "b8991653-b8d5-42a7-81a8-c484efff51fa",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "72ae6f06-922b-421d-b03f-b47756865b53",
                            ConcurrencyStamp = "6caeb0ba-b292-4ac8-8862-b4d65debd405",
                            Name = "Featured Artist",
                            NormalizedName = "FEATURED ARTIST"
                        },
                        new
                        {
                            Id = "49525b50-2ab5-4b25-a9d4-74c12cc1cce6",
                            ConcurrencyStamp = "5f4ee9ef-d3c7-4539-9a91-35971e41b7cc",
                            Name = "Mapper",
                            NormalizedName = "MAPPER"
                        });
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f6b67dce-b44e-4196-ba51-87d13b6f9a13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ac36bb9-c5b0-4053-ba97-124bb80084c2",
                            CreationDate = new DateTime(2023, 6, 18, 20, 6, 8, 138, DateTimeKind.Local).AddTicks(9561),
                            Email = "a@admin.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 20, 6, 8, 138, DateTimeKind.Local).AddTicks(9593),
                            LockoutEnabled = false,
                            NormalizedEmail = "A@ADMIN.COM",
                            NormalizedUserName = "SHAD0W",
                            PasswordHash = "AQAAAAEAACcQAAAAENVSsSnAzlZu7jmI4ZoQXv2yhnJ4gp9mDm3CNKhUStBAb+0FAkd/A0u4bVphT0Bysw==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "a0a713c2-6be1-4d31-a7b1-63592e0e340c",
                            TwoFactorEnabled = false,
                            UserName = "shad0w"
                        },
                        new
                        {
                            Id = "35113748-0b3e-4065-82f8-b6aa18b3a1d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e4edcfa-5f88-497d-8d15-b4eabe10a99c",
                            CreationDate = new DateTime(2023, 6, 18, 20, 6, 8, 140, DateTimeKind.Local).AddTicks(1346),
                            Email = "u@user.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 20, 6, 8, 140, DateTimeKind.Local).AddTicks(1349),
                            LockoutEnabled = false,
                            NormalizedEmail = "U@USER.COM",
                            NormalizedUserName = "ONEGAI",
                            PasswordHash = "AQAAAAEAACcQAAAAEDeqHw2WH8GrZ0rwn4/aufM+GRDW3PjY++ddFs3ScyS9hkeNqkftCab9eEXQnmiGew==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "674af4d2-9d9e-468f-b0ed-a7db2d89d2bd",
                            TwoFactorEnabled = false,
                            UserName = "onegai"
                        },
                        new
                        {
                            Id = "abd139c8-5684-4ed5-9482-469ed6bcb1de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b782c2f9-1ce5-44d0-85dd-50f7a1a115ac",
                            CreationDate = new DateTime(2023, 6, 18, 20, 6, 8, 141, DateTimeKind.Local).AddTicks(2736),
                            Email = "fa@arist.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 20, 6, 8, 141, DateTimeKind.Local).AddTicks(2738),
                            LockoutEnabled = false,
                            NormalizedEmail = "FA@ARIST.COM",
                            NormalizedUserName = "NAMIRIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/7uMx70LauLKY7kNDBU5StaIjSOIbeCCwHmaTYsgFmyzW0E2dWclCn4ZUTF/DZqw==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "4c48c11d-7551-4da8-a262-ec0ec82846e1",
                            TwoFactorEnabled = false,
                            UserName = "namirin"
                        },
                        new
                        {
                            Id = "72ff2f21-e758-45b1-94e4-996f0d764f72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a6fa8df-c31f-42b5-ba60-2193e13306d6",
                            CreationDate = new DateTime(2023, 6, 18, 20, 6, 8, 142, DateTimeKind.Local).AddTicks(4252),
                            Email = "m@mapper.com",
                            EmailConfirmed = true,
                            LastLoginDate = new DateTime(2023, 6, 18, 20, 6, 8, 142, DateTimeKind.Local).AddTicks(4254),
                            LockoutEnabled = false,
                            NormalizedEmail = "M@MAPPER.COM",
                            NormalizedUserName = "SOTARKS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAhQoPA5JfQjLMNU9gMON9TFbRHJq88/Q8LAr2FyyLlKlqMn1J/WFnWolRb+hV7Nwg==",
                            PhoneNumberConfirmed = false,
                            ProfileBannerPath = "/Users/ProfileBanners/default.png",
                            ProfilePicturePath = "/Users/ProfilePictures/default.png",
                            SecurityStamp = "f1cc1dcc-baac-42d4-8d79-79bcb7ccf2b0",
                            TwoFactorEnabled = false,
                            UserName = "Sotarks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f6b67dce-b44e-4196-ba51-87d13b6f9a13",
                            RoleId = "ace8095e-6a00-4cf1-89bf-158d31131711"
                        },
                        new
                        {
                            UserId = "35113748-0b3e-4065-82f8-b6aa18b3a1d4",
                            RoleId = "f5013bd9-a06a-4ef7-9963-259fe85907cd"
                        },
                        new
                        {
                            UserId = "abd139c8-5684-4ed5-9482-469ed6bcb1de",
                            RoleId = "72ae6f06-922b-421d-b03f-b47756865b53"
                        },
                        new
                        {
                            UserId = "72ff2f21-e758-45b1-94e4-996f0d764f72",
                            RoleId = "49525b50-2ab5-4b25-a9d4-74c12cc1cce6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Chartify.Models.Chart", b =>
                {
                    b.HasOne("Chartify.Models.ChartSet", "ChartSet")
                        .WithMany("Charts")
                        .HasForeignKey("ChartSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartSet");
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.HasOne("Chartify.Models.User", "Creator")
                        .WithMany("ChartSets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Chartify.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Chartify.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chartify.Models.ChartSet", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("Chartify.Models.User", b =>
                {
                    b.Navigation("ChartSets");
                });
#pragma warning restore 612, 618
        }
    }
}
